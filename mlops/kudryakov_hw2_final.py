import os
import logging
import mlflow
import mlflow.sklearn
from mlflow import MlflowClient
from mlflow.models import infer_signature
from sklearn.datasets import load_breast_cancer

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

MY_NAME = "VLADISLAV"
MY_SURNAME = "KUDRYAKOV"
EXPERIMENT_NAME = f"{MY_SURNAME}_V_HW2"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è
PARENT_RUN_NAME = "vladislav747"  # –Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
MODEL_NAME = f"LogReg_{MY_SURNAME}"
MLFLOW_TRACKING_URI = "http://localhost:5050"  # MLFlow –≤ Docker

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
models = {
    "LogisticRegression": LogisticRegression(random_state=42, max_iter=1000),
    "RandomForest": RandomForestClassifier(random_state=42, n_estimators=100),
    "GradientBoosting": GradientBoostingClassifier(random_state=42)
}



def setup_mlflow():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ MLFlow: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —É–¥–∞–ª–µ–Ω–Ω—ã—Ö"""
    logger.info("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º MLFlow...")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MLFlow
    mlflow.set_tracking_uri(MLFLOW_TRACKING_URI)
    client = mlflow.tracking.MlflowClient()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    try:
        experiment = mlflow.get_experiment_by_name(EXPERIMENT_NAME)
        
        if experiment is None:
            # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            experiment_id = mlflow.create_experiment(EXPERIMENT_NAME)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {EXPERIMENT_NAME} (ID: {experiment_id})")
        elif experiment.lifecycle_stage == "deleted":
            # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            logger.warning(f"–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {EXPERIMENT_NAME} –±—ã–ª —É–¥–∞–ª–µ–Ω")
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                client.restore_experiment(experiment.experiment_id)
                experiment_id = experiment.experiment_id
                logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {EXPERIMENT_NAME} (ID: {experiment_id})")
            except Exception as restore_error:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º
                new_name = f"{EXPERIMENT_NAME}_v2"
                experiment_id = mlflow.create_experiment(new_name)
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {new_name} (ID: {experiment_id})")
                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                global EXPERIMENT_NAME
                EXPERIMENT_NAME = new_name
        else:
            # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
            experiment_id = experiment.experiment_id
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {EXPERIMENT_NAME} (ID: {experiment_id})")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–º: {e}")
        # –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
        import time
        unique_name = f"{EXPERIMENT_NAME}_{int(time.time())}"
        experiment_id = mlflow.create_experiment(unique_name)
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {unique_name} (ID: {experiment_id})")
        global EXPERIMENT_NAME
        EXPERIMENT_NAME = unique_name
    
    mlflow.set_experiment(EXPERIMENT_NAME)
    return experiment_id


def prepare_data():
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –∑–∞–≥—Ä—É–∑–∫–∞, –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"""
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    data = load_breast_cancer()
    X = pd.DataFrame(data.data, columns=data.feature_names)
    y = pd.Series(data.target, name='target')
    
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –¥–∞—Ç–∞—Å–µ—Ç: {X.shape[0]} –æ–±—Ä–∞–∑—Ü–æ–≤, {X.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    
    # Train/test split
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )
    
    logger.info(f"–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: train={X_train.shape[0]}, test={X_test.shape[0]}")
    
    return X_train, X_test, y_train, y_test


def train_and_log(name, model, X_train, y_train, X_test, y_test):
    """–û–±—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ MLFlow"""
    logger.info(f"–û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å: {name}")
    
    with mlflow.start_run(run_name=name, nested=True):
        # –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å
        model.fit(X_train, y_train)

        # –°–¥–µ–ª–∞—Ç—å predict
        y_pred = model.predict(X_test)
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        accuracy = accuracy_score(y_test, y_pred)
        precision = precision_score(y_test, y_pred)
        recall = recall_score(y_test, y_pred)
        f1 = f1_score(y_test, y_pred)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        mlflow.log_metric('accuracy', accuracy)
        mlflow.log_metric('precision', precision)
        mlflow.log_metric('recall', recall)
        mlflow.log_metric('f1_score', f1)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
        params = model.get_params()
        for param_name, param_value in params.items():
            mlflow.log_param(param_name, param_value)
        
        # –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        signature = infer_signature(X_train, y_pred)
        input_example = X_train.iloc[:5]  # –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –≤ –∞—Ä—Ç–∏—Ñ–∞–∫—Ç–æ—Ä–∏
        mlflow.sklearn.log_model(
            sk_model=model,
            artifact_path="model",
            signature=signature,
            input_example=input_example
        )
        
        logger.info(f"–ú–æ–¥–µ–ª—å {name} –æ–±—É—á–µ–Ω–∞. F1-score: {f1:.4f}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º F1-score –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        return f1, mlflow.active_run().info.run_id


def select_and_register_best_model(results):
    """–í—ã–±–æ—Ä –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ MLFlow Registry"""
    logger.info("–í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å...")
    
    # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –ø–æ F1-score
    best_model_name = max(results.keys(), key=lambda k: results[k]['f1_score'])
    best_result = results[best_model_name]
    best_f1 = best_result['f1_score']
    best_run_id = best_result['run_id']
    
    logger.info(f"–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model_name} —Å F1-score: {best_f1:.4f}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
    model_uri = f"runs:/{best_run_id}/model"
    
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        registered_model = mlflow.register_model(
            model_uri=model_uri,
            name=MODEL_NAME
        )
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–∞–¥–∏—é Staging
        client = mlflow.tracking.MlflowClient()
        client.transition_model_version_stage(
            name=MODEL_NAME,
            version=registered_model.version,
            stage="Staging"
        )
        
        logger.info(f"–ú–æ–¥–µ–ª—å {MODEL_NAME} v{registered_model.version} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ Staging")
        logger.info(f"üèÜ –õ–£–ß–®–ê–Ø –ú–û–î–ï–õ–¨: {best_model_name} —Å F1-score: {best_f1:.4f}")
        
        return best_model_name, best_f1, registered_model.version
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        raise


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ ML-—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ —Å MLFlow")
        
        # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MLFlow
        experiment_id = setup_mlflow()
        
        # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        X_train, X_test, y_train, y_test = prepare_data()
        
        # 3. –û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –≤ parent run
        results = {}
        
        with mlflow.start_run(run_name=PARENT_RUN_NAME):
            logger.info(f"–ó–∞–ø—É—â–µ–Ω parent run: {PARENT_RUN_NAME}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
            mlflow.log_param("dataset", "breast_cancer")
            mlflow.log_param("test_size", 0.2)
            mlflow.log_param("random_state", 42)
            mlflow.log_param("n_models", len(models))
            
            # –û–±—É—á–∞–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
            for model_name, model in models.items():
                f1_score_value, run_id = train_and_log(
                    model_name, model, X_train, y_train, X_test, y_test
                )
                results[model_name] = {
                    'f1_score': f1_score_value,
                    'run_id': run_id
                }
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ parent run
            best_f1 = max(results.values(), key=lambda x: x['f1_score'])['f1_score']
            avg_f1 = np.mean([r['f1_score'] for r in results.values()])
            
            mlflow.log_metric("best_f1_score", best_f1)
            mlflow.log_metric("average_f1_score", avg_f1)
            
            logger.info(f"Parent run –∑–∞–≤–µ—Ä—à–µ–Ω. –õ—É—á—à–∏–π F1-score: {best_f1:.4f}")
        
        # 4. –í—ã–±–æ—Ä –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
        best_model_name, best_f1, model_version = select_and_register_best_model(results)
        
        logger.info("‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π:")
        for name, result in results.items():
            logger.info(f"   {name}: F1-score = {result['f1_score']:.4f}")
        
        logger.info(f"ü•á –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {best_model_name} (F1-score: {best_f1:.4f})")
        logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫: {MODEL_NAME} v{model_version} –≤ —Å—Ç–∞–¥–∏–∏ Staging")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ: {e}")
        raise


if __name__ == "__main__":
    main()